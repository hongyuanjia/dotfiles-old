" Dark powered mode of SpaceVim, generated by SpaceVim automatically.
let g:spacevim_enable_debug = 1
let g:spacevim_realtime_leader_guide = 1
call SpaceVim#layers#load('incsearch')
call SpaceVim#layers#load('autocomplete')
call SpaceVim#layers#load('lang#python')
call SpaceVim#layers#load('lang#tmux')
call SpaceVim#layers#load('lang#vim')
call SpaceVim#layers#load('shell')   
call SpaceVim#layers#load('tools#screensaver')
let g:spacevim_enable_vimfiler_welcome = 1
let g:spacevim_enable_debug = 1
let g:deoplete#auto_complete_delay = 150
let g:spacevim_enable_tabline_filetype_icon = 1
let g:spacevim_enable_statusline_display_mode = 0
let g:spacevim_enable_os_fileformat_icon = 1
let g:spacevim_buffer_index_type = 1
let g:neomake_vim_enabled_makers = []
if executable('vimlint')
    call add(g:neomake_vim_enabled_makers, 'vimlint') 
endif
if executable('vint')
    call add(g:neomake_vim_enabled_makers, 'vint') 
endif
if has('python3')
    let g:ctrlp_map = ''
    nnoremap <silent> <C-p> :Denite file_rec<CR>
endif
let g:clang2_placeholder_next = ''
let g:clang2_placeholder_prev = ''

" Custom {{{
let g:spacevim_custom_plugins = [
      \['jalvesaq/Nvim-R'],
      \['roxma/nvim-completion-manager'],
      \['roxma/vim-hug-neovim-rpc'],
      \['gaalcaras/ncm-R'],
      \['vim-pandoc/vim-pandoc'],
      \['vim-pandoc/vim-rmarkdown']
      \]
" }}} Custom
" Set SpaceVim buffer index type
let g:spacevim_buffer_index_type = 4
" Set SpaceVim windows index type
let g:spacevim_windows_index_type = 3
let g:spacevim_github_username = 'hongyuanjia'
let g:spacevim_enable_vimfiler_welcome = 0
let g:spacevim_colorscheme = 'molokai'
let g:spacevim_snippet_engine = 'ultisnips'
let g:python3_host_prog = 'C:\\Python36\\python.exe'

" Set folding method for specfic file types {{{
augroup ft_vim
    au!
au FileType vim setlocal foldmethod=marker
au FileType r setlocal foldmethod=marker
augroup END
" }}}
" Commentary strings for different file types {{{
augroup plugin_commentary
    au!
    au FileType python setlocal commentstring=#%s
    au FileType idf setlocal commentstring=!\ %s
    au FileType osm setlocal commentstring=!\ %s
augroup END
" }}}
" EnergyPlus file type {{{
augroup ft_idf
    au!
    au BufRead,BufNewFile *.idf set filetype=idf
    au BufRead,BufNewFile *.epmidf set filetype=idf
    au BufRead,BufNewFile *.imf set filetype=idf
    au BufRead,BufNewFile *.ddy set filetype=idf
    au BufRead,BufNewFile *.osm set filetype=osm
augroup END
" }}}
" Auto quit R when close Vim {{{
autocmd VimLeave * if exists("g:SendCmdToR") && string(g:SendCmdToR) != "function('SendCmdToR_fake')" | call RQuit("nosave") | endif
" }}}
" Insert '%>%' pipe '.[]' operator in R {{{
augroup r_pipe
    autocmd!
    autocmd FileType R inoremap <buffer> ½ <c-v><Space>%>%<c-v><Space>
    autocmd FileType R inoremap <buffer> <M-=> <c-v><Space>%>%<c-v><Space>
    autocmd FileType R inoremap <buffer> ® .[]
    autocmd FileType R inoremap <buffer> <M-.> .[]
    autocmd FileType R inoremap <buffer> <M-;> <c-v><Space>:=<c-v><Space>
    autocmd FileType R inoremap <buffer> <C-o> <C-x><C-o>
augroup END
" }}}
" Nvim-R {{{
let rmd_syn_hl_chunk = 1
" not losing focus every time that you generate the pdf
let R_openpdf = 1
" highlight R functions only if the `(` is typed
let R_hl_fun_paren = 1
let R_hl_term = 1
let R_listmethods = 1
" lists the arguments of a function, but and also the arguments of its methods
let R_objbr_opendf = 0
let Rout_more_colors = 1
let R_objbr_openlist = 0
" show a preview window of function arguments description and arguments
let R_show_arg_help = 1
let R_commented_lines = 1
let R_assign_map = "<M-->"
" clear R Console line before sending commands~
let R_clear_line = 1
let R_source_args = "print.eval = TRUE, max.deparse.length = 1000, echo = TRUE, encoding = 'UTF-8'"
let R_in_buffer = 0
" }}}

set clipboard+=unnamed
let maplocalleader = ","
nnoremap j gj
nnoremap k gk
vnoremap j gj
vnoremap k gk
" Move to the start of line
nnoremap H ^
vnoremap H ^
" Move to the end of line
nnoremap L $
vnoremap L $
" Quick command mode
nnoremap ; :
nnoremap : ;
" Case sensitive when uc present
set smartcase      
set guifont=DroidSansMonoForPowerline\ NF:h12
set guifontwide=SimHei:h12
set dictionary+=$HOME/.SpaceVim.d/dict/english.dic

autocmd ColorScheme * highlight Folded guifg=SlateGray
" ToggleSlash {{{
function! ToggleSlash(independent) range
  let from = ''
  for lnum in range(a:firstline, a:lastline)
    let line = getline(lnum)
    let first = matchstr(line, '[/\\]')
    if !empty(first)
      if a:independent || empty(from)
        let from = first
      endif
      let opposite = (from == '/' ? '\' : '/')
      call setline(lnum, substitute(line, from, opposite, 'g'))
    endif
  endfor
endfunction
command! -bang -range ToggleSlash <line1>,<line2>call ToggleSlash(<bang>1)
nnoremap <Leader>r<BSlash> :ToggleSlash<CR>
" }}}
let g:spacevim_statusline_left_sections =
  \ [
  \ 'winnr',
  \ 'filename',
  \ 'major mode',
  \ 'version control info'
  \ ]
